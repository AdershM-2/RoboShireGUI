#!/usr/bin/env python3
"""
{{ node_name }} - Generated by RobotStudio

{{ description }}

Generated on: {{ generation_date }}
"""

import rclpy
from rclpy.node import Node
from rclpy.qos import QoSProfile, ReliabilityPolicy, DurabilityPolicy, HistoryPolicy
{% for msg_import in message_imports %}
{{ msg_import }}
{% endfor %}


class {{ class_name }}(Node):
    """{{ description }}"""

    def __init__(self):
        super().__init__('{{ node_name }}')

        self.get_logger().info('{{ node_name }} starting...')
{% if parameters %}

        # Declare parameters
{% for param in parameters %}
        self.declare_parameter('{{ param.name }}', {{ param.default_value }})
{% endfor %}
{% endif %}
{% if publishers %}

        # Publishers
{% for pub in publishers %}
        # QoS Profile for {{ pub.topic }}
        {{ pub.var_name }}_qos = QoSProfile(
            reliability=ReliabilityPolicy.{{ pub.qos_reliability | default('RELIABLE') }},
            durability=DurabilityPolicy.{{ pub.qos_durability | default('VOLATILE') }},
            history=HistoryPolicy.{{ pub.qos_history | default('KEEP_LAST') }},
            depth={{ pub.qos_depth | default(10) }}
        )
        self.{{ pub.var_name }} = self.create_publisher(
            {{ pub.msg_class }},
            '{{ pub.topic }}',
            {{ pub.var_name }}_qos
        )
{% endfor %}
{% endif %}
{% if subscribers %}

        # Subscribers
{% for sub in subscribers %}
        # QoS Profile for {{ sub.topic }}
        {{ sub.var_name }}_qos = QoSProfile(
            reliability=ReliabilityPolicy.{{ sub.qos_reliability | default('RELIABLE') }},
            durability=DurabilityPolicy.{{ sub.qos_durability | default('VOLATILE') }},
            history=HistoryPolicy.{{ sub.qos_history | default('KEEP_LAST') }},
            depth={{ sub.qos_depth | default(10) }}
        )
        self.{{ sub.var_name }} = self.create_subscription(
            {{ sub.msg_class }},
            '{{ sub.topic }}',
            self.{{ sub.callback_name }},
            {{ sub.var_name }}_qos
        )
{% endfor %}
{% endif %}
{% if timers %}

        # Timers
{% for timer in timers %}
        self.{{ timer.var_name }} = self.create_timer(
            {{ timer.period }},
            self.{{ timer.callback_name }}
        )
{% endfor %}
{% endif %}
{% if service_servers %}

        # Service Servers
{% for srv in service_servers %}
        self.{{ srv.var_name }} = self.create_service(
            {{ srv.srv_class }},
            '{{ srv.service }}',
            self.{{ srv.callback_name }}
        )
{% endfor %}
{% endif %}
{% if service_clients %}

        # Service Clients
{% for cli in service_clients %}
        self.{{ cli.var_name }} = self.create_client(
            {{ cli.srv_class }},
            '{{ cli.service }}'
        )
{% endfor %}
{% endif %}

        self.get_logger().info('{{ node_name }} initialized successfully')

{% if timers %}
{% for timer in timers %}
    def {{ timer.callback_name }}(self):
        """Timer callback - executes every {{ timer.period }} seconds"""
{% if timer.code %}
{{ timer.code | indent(8, True) }}
{% else %}
        # TODO: Implement timer logic
        self.get_logger().info('Timer callback triggered')
{% endif %}

{% endfor %}
{% endif %}
{% if subscribers %}
{% for sub in subscribers %}
    def {{ sub.callback_name }}(self, msg):
        """
        Callback for subscriber on topic '{{ sub.topic }}'

        Args:
            msg: {{ sub.msg_class }} message
        """
{% if sub.code %}
{{ sub.code | indent(8, True) }}
{% else %}
        # TODO: Implement subscriber logic
        self.get_logger().info(f'Received message: {msg}')
{% endif %}

{% endfor %}
{% endif %}
{% if service_servers %}
{% for srv in service_servers %}
    def {{ srv.callback_name }}(self, request, response):
        """
        Service callback for '{{ srv.service }}'

        Args:
            request: {{ srv.srv_class }}.Request
            response: {{ srv.srv_class }}.Response

        Returns:
            response with results
        """
{% if srv.code %}
{{ srv.code | indent(8, True) }}
{% else %}
        # TODO: Implement service logic
        self.get_logger().info('Service called')
        response.success = True
        response.message = 'Service executed successfully'
{% endif %}
        return response

{% endfor %}
{% endif %}


def main(args=None):
    """Main entry point"""
    rclpy.init(args=args)

    node = {{ class_name }}()

    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    except Exception as e:
        # Handle external shutdown and other exceptions gracefully
        node.get_logger().warn(f'Node interrupted: {type(e).__name__}')
    finally:
        node.get_logger().info('{{ node_name }} shutting down')
        node.destroy_node()

        # Only shutdown if context is still valid
        try:
            if rclpy.ok():
                rclpy.shutdown()
        except Exception:
            # Context already shutdown - this is fine
            pass


if __name__ == '__main__':
    main()
